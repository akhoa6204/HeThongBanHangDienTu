import { fetchApiGet, fetchApiCancelOrder } from '../service/admin_order_detail/fetchApi.js';

const pathParts = window.location.pathname.split('/');
const orderId = pathParts[3];
console.log("Order ID:", orderId);
const statusTextMap = {
  pending: 'Ch·ªù x√°c nh·∫≠n',
  processing: 'ƒêang x·ª≠ l√Ω',
  shipping: 'ƒêang giao h√†ng',
  shipped: 'ƒê√£ giao h√†ng',
  cancelled: 'ƒê√£ h·ªßy'
};

function formatPrice(value) {
  return new Intl.NumberFormat('vi-VN', { style: 'currency', currency: 'VND' }).format(value);
}

function renderCustomerInfo(user, order) {
  const container = document.getElementById('customer-info');
  if (!container) return;
  console.log(order);
  container.innerHTML = `
    <p><span class="material-symbols-outlined">person</span><strong>${user.first_name} ${user.last_name}</strong></p>
    <p>üìû ${user.phone}</p>
    <p>üìß ${user.email}</p>
    <p>üè† ${order.address}</p>
    <p>üÜî M√£ ƒë∆°n h√†ng: <strong>${order.id}</strong></p>
    ${order.need_invoice ? '<p class="invoice-request">üßæ Kh√°ch h√†ng y√™u c·∫ßu xu·∫•t h√≥a ƒë∆°n</p>' : ''}
  `;
}

function renderOrderItems(order_items) {
  const container = document.getElementById('order-items');
  if (!container) return;

  if (!order_items.length) {
    container.innerHTML = '<p>Kh√¥ng c√≥ s·∫£n ph·∫©m trong ƒë∆°n h√†ng.</p>';
    return;
  }

  let html = `
    <table>
      <thead>
        <tr>
          <th>ID</th>
          <th>·∫¢nh</th>
          <th>T√™n s·∫£n ph·∫©m</th>
          <th>ƒê∆°n gi√°</th>
          <th>S·ªë l∆∞·ª£ng</th>
          <th>Th√†nh ti·ªÅn</th>
        </tr>
      </thead>
      <tbody>
  `;

  order_items.forEach(item => {
    console.log(item);
    const product = item.product || {};
    const images = product.options[0].colors[0].images[0] || [];
    const imageUrl = images ? images.img : '';

    const productName = product.name || 'N/A';
    console.log(product);
    const discount = Number(product.options[0].discount) || 0;
    const oldPrice = Number(product.options[0].colors[0].price);
    const price = Number(product.options[0].colors[0].price) * (1-discount)| 0;

    const quantity = item.quantity || 0;

    // Th√†nh ti·ªÅn
    const total = price * quantity;

    html += `
      <tr>
        <td>${item.id}</td>
        <td><img src="${imageUrl}" alt="${productName}" style="max-width: 50px;"></td>
        <td>${productName} - ${product.options[0].version} - ${product.options[0].colors[0].color}</td>
        <td>
            ${discount > 0 ?
                `
                    <span style="color: red;font-size: 14px;">${formatPrice(price)}</span>
                    <span style="color:#ccc;"><strike>${formatPrice(oldPrice)}</strike></span>
                `:
                `<span style="color: red;font-size: 14px;">${formatPrice(price)}</span>`
            }
        </td>
        <td>${quantity}</td>
        <td><span style="color: red;font-size: 14px;">${formatPrice(total)}</span></td>
      </tr>
    `;
  });

  html += `
      </tbody>
    </table>
  `;

  container.innerHTML = html;
}

function renderTotalPrice(totalPrice) {
  const container = document.getElementById('total-price');
  if (!container) return;

  container.innerHTML = `<strong>Th√†nh ti·ªÅn:</strong> ${formatPrice(totalPrice)}`;
}

fetchApiGet(orderId)
  .then(data => {
    if (!data) return;

    const order = data.order;
    renderCustomerInfo(order.user, order);
    renderOrderItems(order.order_items);
    renderTotalPrice(order.total_price);

    setupCancelForm(order);

    const statusSpan = document.querySelector('.orderStatus');
    if (statusSpan) {
      const statusClass = order.status;
      const statusText = statusTextMap[statusClass] || statusClass;

      statusSpan.textContent = statusText;
      statusSpan.className = 'orderStatus ' + statusClass;  // ƒë·ªÉ th√™m style theo class
    }

  })
  .catch(err => {
    console.error('Error fetching order:', err);
  });

function setupCancelForm(order) {
  const form = document.getElementById('form-cancelled');
  const reasonInput = document.getElementById('reason');
  const noteInput = document.getElementById('note');
  const cancelBtn = document.getElementById('cancelBtn');
  const saveBtn = document.getElementById('saveBtn');
  const backBtn = document.getElementById('backBtn');

  const urlParams = new URLSearchParams(window.location.search);
  const toStatus = urlParams.get('to');

  const isForceCancelMode = toStatus === 'cancelled';
  if (order.status === 'shipped') {
      // ƒê∆°n ƒë√£ ho√†n t·∫•t - kh√¥ng cho h·ªßy
      form.style.display = 'none';
      cancelBtn.style.display = 'none';
      saveBtn.style.display = 'none';
      backBtn.style.display = 'none';
      return;
    }

  if (order.status === 'cancelled') {
    // ƒê∆°n ƒë√£ b·ªã h·ªßy
    form.style.display = 'block';
    reasonInput.value = order.order_cancellation.reason || '';
    noteInput.value = order.order_cancellation.note || '';
    reasonInput.readOnly = true;
    noteInput.readOnly = true;

    cancelBtn.style.display = 'none';
    saveBtn.style.display = 'none';
    backBtn.style.display = 'none';
  } else if (isForceCancelMode) {
    // Tr∆∞·ªùng h·ª£p URL c√≥ ?to=cancelled => hi·ªán form s·∫µn
    form.style.display = 'block';
    reasonInput.readOnly = false;
    noteInput.readOnly = false;

    cancelBtn.style.display = 'none';
    saveBtn.style.display = 'inline-block';
    backBtn.style.display = 'inline-block';
  } else {
    // Tr·∫°ng th√°i b√¨nh th∆∞·ªùng
    form.style.display = 'none';
    cancelBtn.style.display = 'inline-block';
    saveBtn.style.display = 'none';
    backBtn.style.display = 'none';

    cancelBtn.addEventListener('click', () => {
      form.style.display = 'block';
      reasonInput.readOnly = false;
      noteInput.readOnly = false;

      cancelBtn.style.display = 'none';
      saveBtn.style.display = 'inline-block';
      backBtn.style.display = 'inline-block';
    });

    backBtn.addEventListener('click', () => {
      form.style.display = 'none';
      reasonInput.value = '';
      noteInput.value = '';

      cancelBtn.style.display = 'inline-block';
      saveBtn.style.display = 'none';
      backBtn.style.display = 'none';
    });
  }

  // X·ª≠ l√Ω khi nh·∫•n "L∆∞u"
  saveBtn.addEventListener('click', () => {
    const cancelReason = reasonInput.value.trim();
    const note = noteInput.value.trim();

    if (!cancelReason) {
      alert('Vui l√≤ng nh·∫≠p l√Ω do h·ªßy.');
      return;
    }
    console.log(cancelReason);
    console.log(note);
    fetchApiCancelOrder(orderId, cancelReason, note)
    .then(data => {
    // Hi·ªÉn th·ªã popup th√†nh c√¥ng
    const popupSuccess = document.querySelector(".popup-model.success.change_status_order");
    popupSuccess.classList.add('active');

    // C·∫≠p nh·∫≠t tr·∫°ng th√°i trong DOM
    const statusSpan = document.querySelector('.orderStatus');
    if (statusSpan) {
        const statusText = statusTextMap['cancelled'];
        statusSpan.textContent = statusText;
        statusSpan.className = 'orderStatus cancelled';
    }

    // C·∫≠p nh·∫≠t form: readonly v√† ƒëi·ªÅn l·∫°i th√¥ng tin v·ª´a g·ª≠i
    reasonInput.value = cancelReason;
    noteInput.value = note;
    reasonInput.readOnly = true;
    noteInput.readOnly = true;

    // Hi·ªÉn th·ªã form readonly
    form.style.display = 'block';
    cancelBtn.style.display = 'none';
    saveBtn.style.display = 'none';
    backBtn.style.display = 'none';
})

    .catch(err => {
        const popupError= document.querySelector(".popup-model.error.change_status_order");
        popupError.classList.add('active');
    })
  });
}
